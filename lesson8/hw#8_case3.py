'''
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит
работу скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
'''

class InpException(Exception):
    def __init__(self, txt):
        self.txt = txt

usr_lst = []

while 1:
    try:
        usr_inp = input('Введите число. Если хотите завершить ввод, введите "stop": ')
        if usr_inp.isdigit():
            usr_lst.append(int(usr_inp))
        elif usr_inp.isalpha():
            if usr_inp == 'stop':
                break
            else:
                raise InpException('Вы ввели не число. Введите число, плиииз.')
        else:
            if usr_inp.count('.') == 1:
                num = usr_inp.partition('.')
                if num[0].isdigit() and num[2].isdigit():
                    usr_lst.append(float(usr_inp))
                else:
                    raise InpException('Вы ввели не число. Введите число, плиииз.')
            else:
                raise InpException('Вы ввели не число. Введите число, плиииз.')
    except InpException as err:
        print(err)
        continue

print(usr_lst)