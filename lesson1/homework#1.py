'''
case 1
Поработайте с переменными, создайте несколько, выведите на экран,
запросите у пользователя несколько чисел и строк и сохраните в переменные, выведите на экран.
'''
number_a = int (input('Введите число a: '))
number_b = int (input('Введите число b: '))
sum_number = number_a + number_b
print(f'Сумма чисел "{number_a}" и "{number_b}" равна: {sum_number}')

user_name = input('Введите ваше имя: ')

text_count = int(input(f'{user_name.capitalize()}, сколько раз Вы хотели бы поприветствовать себя: '))

user_text = f'Привет, {user_name.capitalize()}!\n'

print(user_text * text_count)
'''
case 2
Пользователь вводит время в секундах.
Переведите время в часы, минуты и секунды и выведите в формате чч:мм:сс. Используйте форматирование строк.
'''
user_time = int(input('Введите время в секундах для перевода в чч:мм:сс: '))

hour = user_time // 3600
minute = user_time % 3600 // 60
second = user_time % 60

print(f'Количество секунд "{user_time}" соответсвует {hour:02}:{minute:02}:{second:02}')
'''
case 3
Узнайте у пользователя число n. Найдите сумму чисел n + nn + nnn. Например, пользователь ввёл число 3.
Считаем 3 + 33 + 333 = 369.
'''
user_number = input('Введите целое число: ')
n = int(user_number)
nn = int(user_number * 2)
nnn = int(user_number * 3)
sum_n = n + nn + nnn
print(f'Сумма чисел по формуле равна {sum_n}')
'''
case 4
Пользователь вводит целое положительное число.
Найдите самую большую цифру в числе.
Для решения используйте цикл while и арифметические операции.
'''

user_number = int (input('Введите целое положительное число: '))
n = 0 #степень 10-ки
max_digit = 0
current_digit = 0

max_digit = (user_number % 10 ** (n + 1)) // 10 ** n #помещаем в max_digit первую справа цифру

while user_number // 10 ** n > 0: #цикл пока степень 10-ки не превысит разрядность числа
    current_digit = (user_number % 10 ** (n + 1)) // 10 ** n
    if current_digit >= max_digit:
        max_digit = current_digit
    n += 1
print(f'Самая большая цифра в числе {user_number} - это: {max_digit}')
'''
case 5
Запросите у пользователя значения выручки и издержек фирмы.
Определите, с каким финансовым результатом работает фирма (прибыль — выручка больше издержек,
или убыток — издержки больше выручки). Выведите соответствующее сообщение.
Если фирма отработала с прибылью, вычислите рентабельность выручки (соотношение прибыли к выручке).
Далее запросите численность сотрудников фирмы и определите прибыль фирмы в расчете на одного сотрудника.
'''
proceeds = int(input('Введите выручку фирмы: '))
costs = int(input('Введите издержки фирмы: '))

if proceeds > costs:
    print('Финансовый показатель работы фирмы: ПРИБЫЛЬ')
    print(f'Прибыль составила: {proceeds-costs}')
    print(f'Рентабельность работы фирмы: {(proceeds-costs)/proceeds*100:.2f}%')
    emp_num = int (input('Введите количество сотрудников фирмы: '))
    print(f'Прибыль фирмы в расчете на одного сотрудника составляет: {(proceeds - costs) / emp_num:.2f}')
elif proceeds < costs:
    print('Финансовый показатель работы фирмы: УБЫТОК')
else:
    print('Финансовый показатель работы фирмы: "В НОЛЬ"')
'''
case 6
Спортсмен занимается ежедневными пробежками. В первый день его результат составил a километров.
Каждый день спортсмен увеличивал результат на 10 % относительно предыдущего.
Требуется определить номер дня, на который общий результат спортсмена составить не менее b километров.
Программа должна принимать значения параметров a и b и выводить одно натуральное число — номер дня.
Например: a = 2, b = 3.
Результат:
1-й день: 2
2-й день: 2,2
3-й день: 2,42
4-й день: 2,66
5-й день: 2,93
6-й день: 3,22
Ответ: на 6-й день спортсмен достиг результата — не менее 3 км.
'''

start = int(input('Введите, сколько километров в первый день пробежал спортсмен?: '))
target = int(input('Введите, целевое количество километров для спортсмена: '))
day = 1

print(f'{day}-й день: {start:.2f}\n')

while start < target:
    start *= 1.1
    day += 1
    print(f'{day}-й день: {start:.2f}\n')

print(f'Цели в не менее {target} км спортсмен достигнет на {day} день тренировок')
